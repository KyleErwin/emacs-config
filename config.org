
#+TITLE: Emacs Config
#+AUTHOR: Kyle Erwin

My ever evolving emacs config.

* Package Setup
** Configure Package Sources
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives
               '("melpa" . "https://melpa.org/packages/")
               '("gnu" . "https://elpa.gnu.org/packages/"))

  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap use-package
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-always-ensure t)
#+END_SRC

* Config Setup
** Custom Config Functions

Open / visit the configuration file
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC

Reload the configuration
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Startup
** Buffer Clean Up

I never use the scratch buffer.
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message "")

;; Removes *scratch* from buffer after the mode has been set.
(defun remove-scratch-buffer ()
  (if (get-buffer "*scratch*")
      (kill-buffer "*scratch*")))
(add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+END_SRC

If you really wanted to you could remove the messages buffer.
#+BEGIN_SRC emacs-lisp
;;(setq-default message-log-max nil)
;;(kill-buffer "*Messages*")
#+END_SRC

Remove cpmpletions buffer.
#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-exit-hook
      '(lambda ()
         (let ((buffer "*Completions*"))
           (and (get-buffer buffer)
                (kill-buffer buffer)))))
#+END_SRC

* Appearance
** Font Settings

The Roboto font from powerline is great.
#+BEGIN_SRC emacs-lisp
  (when (window-system)
  (set-face-attribute 'default nil
                    :family "Roboto Mono for Powerline"
                    :height 120
                    :weight 'normal
                    :width 'normal))
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)
#+END_SRC

** Theme

Doom themes everything. See themes [[https://github.com/hlissner/emacs-doom-themes/][here]]
#+BEGIN_SRC emacs-lisp
(use-package doom-themes)
(load-theme 'doom-city-lights t)

(use-package all-the-icons)

(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))


#+END_SRC

Neo tree looks cool but I don't really use it
#+BEGIN_SRC emacs lisp
;;(use-package neotree)
;;(setq neo-theme (if (display-graphic-p) 'icons 'arrow))
;;(global-set-key [f8] 'neotree-toggle)
#+END_SRC

Keep old theme settings around just incase.
#+BEGIN_SRC emacs_lisp
;; (use-package monokai-theme)
;; (load-theme 'monokai t)
;; (use-package spacemacs-theme)
;; (load-theme 'spacemacs-dark t)
;; (use-package material-theme)
;; (load-theme 'material t)

;; (add-to-list 'custom-theme-load-path (expand-file-name "themes"
                                                       user-emacs-directory))
;; (use-package smart-mode-line
;;  :config
;;  (setq sml/theme 'atom-one-dark)
;;  (sml/setup))
#+END_SRC

** Window Decoration

Turn off unwanted window decoration. It gets in the way.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

Maxmise on startup
#+BEGIN_SRC emacs-lisp

(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

* Workflow
** Add multiple cursor support.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
   :ensure t
   :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-prev-like-this)
         ("C-c C-<" . mc/mark-all-like-this)))
#+END_SRC

** Async support

Certian Dired and Helm functions benifit from async support.
#+BEGIN_SRC emacs-lisp
  (use-package async
    :ensure t)
#+END_SRC

** Better Everything With Helm

Helm is amazing. Helm everything.
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t)

(global-set-key (kbd "M-x")                          'undefined)
(global-set-key (kbd "M-x")                          'helm-M-x)
(global-set-key (kbd "M-y")                          'helm-show-kill-ring)
(global-set-key (kbd "C-x C-f")                      'helm-find-files)
(global-set-key (kbd "C-x b")                        'helm-mini)
(global-set-key (kbd "C-x r b")                      'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-d")                      'helm-browse-project)
;;(global-set-key (kbd "C-s")                          'helm-occur)

#+END_SRC

** Better Navigation

#+BEGIN_SRC emacs-lisp
(defun my-buffer-predicate (buffer)
  (if (string-match "helm" (buffer-name buffer))
      nil
    t))
(set-frame-parameter nil 'buffer-predicate 'my-buffer-predicate)

(global-set-key (kbd "M-]") 'next-buffer)
(global-set-key (kbd "M-[") 'previous-buffer)
#+END_SRC

** Better Searching

Use the ivy enhanced version of =isearch=
#+BEGIN_SRC emacs-lisp
 (use-package swiper
   :ensure t
   :bind (("\C-s" . swiper))
   :config
   (progn
     (ivy-mode 1)
     (setq ivy-use-virtual-buffers t)
     (setq enable-recursive-minibuffers t)
     ;(global-set-key (kbd "C-c C-r") 'ivy-resume)
     ;(global-set-key (kbd "<f6>") 'ivy-resume)
     ))
 #+END_SRC

** Better Window Switching

Faster switching between windows, via =ace-window=
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window))
#+END_SRC

** Buffers
** Dashboard

Display a simple dashboard at startup
#+BEGIN_SRC emacs-lisp
    (use-package dashboard
      :ensure t
      :config
      (dashboard-setup-startup-hook)
      (setq show-week-agenda-p t)
      (setq dashboard-items '((agenda . 10)
                              (bookmarks . 5)
                              (recents  . 10)
                              (projects . 5))))

(setq dashboard-banner-logo-title " Dashboard ")
(setq dashboard-startup-banner "~/.emacs.d/logo.png")
#+END_SRC

** Git

Include magit
#+BEGIN_SRC emacs-lisp
 (use-package magit
   :ensure t
   :bind ("C-x g" . magit-status)
   :bind ("C-c C-g C-s" . magit-stage-file)
   :bind ("C-c C-g C-c" . magit-commit-create))
#+END_SRC

Include git g

** utter. Git gutter works on save, don't want it
interactive... for now.
#+BEGIN_SRC emacs-lisp
 (use-package git-gutter)

(custom-set-variables
 '(git-gutter:modified-sign "~~")
 '(git-gutter:added-sign "++")
 '(git-gutter:deleted-sign "--"))

(set-face-foreground 'git-gutter:modified "yellow")

(global-git-gutter-mode +1)
#+END_SRC

** Hippie-expand

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-/") 'hippie-expand)
  (setq hippie-expand-try-functions-list
        '(try-expand-dabbrev
          try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill
          try-complete-file-name-partially try-complete-file-name
          try-expand-all-abbrevs try-expand-list try-expand-line
          try-complete-lisp-symbol-partially try-complete-lisp-symbol))
#+END_SRC

** Keybinds

Key cord
#+BEGIN_SRC emacs-lisp
 (use-package key-chord
  :ensure t)

(global-set-key (kbd "C-+") 'zoom-frm-in)
(global-set-key (kbd "C--") 'zoom-frm-out)
#+END_SRC

** Opening Multiple Buffers

Don't show *Buffer list* when opening multiple files at the same time.
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-buffer-menu t)
#+END_SRC

** Prompts

Make the =yes or no= prompts shorter.
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Save Functionality

I *never* want whitespace at the end of lines. Remove it on save.
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

Automatically delete whitespace in a sensible way with "smart" hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config
    (global-hungry-delete-mode))
#+END_SRC

Also, having a newline at the end of the file is a "good" thing:
#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

Turn off backup and autosave.
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)

  (setq save-interprogram-paste-before-kill t
        apropos-do-all t
        mouse-yank-at-point t
        require-final-newline t
        visible-bell t
        load-prefer-newer t
        ediff-window-setup-function 'ediff-setup-windows-plain
        save-place-file (concat user-emacs-directory "places")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups"))))
#+END_SRC

** Select Region

Add expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-=" . er/expand-region))

#+END_SRC

** Spelling

=writegood-mode= highlights bad words, weasels etc. Also has functions
to calculate readability of writing.

#+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
    :bind ("C-c g" . writegood-mode)
    :init
    (add-hook 'TeX-update-style-hook #'writegood-mode)
    :config
    (add-to-list 'writegood-weasel-words "actionable"))
#+END_SRC

** Tabs

Don't use tabs.
#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

** Utility

Is this actually required? I don't know...
#+BEGIN_SRC emacs-lisp
  (use-package f
    :ensure t)
#+END_SRC

** Visual Indicators

Highlight the current line.
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC


Inline display of colours.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

Add a visual inidcator when switching to a different window.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :config
    (beacon-mode 1))
#+END_SRC

Use the "forward" uniquify scheme for buffer disambiguation
#+BEGIN_SRC emacs-lisp
(setq uniquify-buffer-name-style 'forward)
#+END_SRC

** Wait? What Key Do I Use?

Which key to show a list of keys that follow a speicific key-chord
#+BEGIN_SRC emacs-lisp
 (use-package which-key
   :ensure t
   :config (which-key-mode))
#+END_SRC

* General Dev Config

General config for development that is agnostic of language.

** Company Mode

Completion service using =company-mode=
#+BEGIN_SRC emacs-lisp
 (use-package company
   :ensure t
   :config (global-company-mode t))

(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC

** Dumb-jump

#+BEGIN_SRC emacs-lisp
    (use-package dumb-jump
      :ensure t
      ;; :bind (("M-g o" . dumb-jump-go-other-window)
      ;;        ("M-g j" . dumb-jump-go)
      ;;        ("M-g x" . dumb-jump-go-prefer-external)
      ;;        ("M-g z" . dumb-jump-go-prefer-external-other-window))
      :init
      (dumb-jump-mode)
      :config
      (setq dumb-jump-selector 'ivy)
      ;; Add some config for elm files
      (nconc dumb-jump-language-file-exts
             '((:language "elm" :ext "elm" :agtype "elm" :rgtype "elm")))
      (nconc dumb-jump-language-comments
             '((:comment "--" :language "elm")))
      (nconc dumb-jump-find-rules
             ;; Rules, based off the haskell syntax
             '((:type "module" :supports ("ag" "rg") :language "elm"
                      :regex "^module\\s+JJJ\\s+"
                      :tests ("model Test exposing (exportA, exportB)"))

               (:type "type" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                      :regex "^type\\s+JJJ\\b"
                      :tests ("type Test"))
               (:type "type" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                      :regex "^type\\s+alias\\s+JJJ\\b"
                      :tests ("type alias Test" "type alias Model ="))
               (:type "function" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                      :regex "^port\\s+JJJ\\b\\s*:[^:]"
                      :tests ("port requestPopup :"))
               (:type "function" :supports ("ag" "rg" "grep" "git-grep") :language "elm"
                      :regex "^\\s*JJJ\\s*:[^:].*->.*"
                      :tests ("foo : Int -> Int"))
               ))
      ;;--regex-Elm=/^ *([[:lower:]][[:alnum:]_]+)[[:blank:]]*:[^:][^-]+$/\1/c,constant,constants/
      )
#+END_SRC

** Flycheck

=Flycheck= to allow for the checking of code [[https://www.flycheck.org/en/latest/][Documentation]]

#+BEGIN_SRC emacs-lisp
 (use-package flycheck
   ;; :diminish flycheck-mode
   :demand t
   :ensure t
   :init
   (setq flycheck-check-syntax-automatically '(mode-enabled save))
   (setq flycheck-checker-error-threshold 2000)
   :config
   (mapc (lambda (mode)
           (add-hook mode 'flycheck-mode))
         '(elm-mode-hook
           emacs-lisp-mode-hook
           haskell-mode-hook
           ))
   (add-hook 'sh-mode-hook
             (lambda ()
               (flycheck-select-checker 'sh-shellcheck)))
   (add-hook 'elm-mode-hook
             (lambda ()
               (flycheck-elm-setup))))
#+END_SRC

** Highlight TODO / FIXME Strings in Buffers

#+BEGIN_SRC emacs-lisp
 (use-package fic-mode
   :ensure t
   :config
   (add-hook 'prog-mode-hook 'fic-mode))
#+END_SRC

** Parentheses Highlighting

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
    (add-hook 'TeX-update-style-hook #'rainbow-delimiters-mode)
    (set-face-attribute 'rainbow-delimiters-unmatched-face nil
                        :foreground "red"
                        :inherit 'error
                        :box t)
    )
#+END_SRC

** Project Management

#+BEGIN_SRC emacs-lisp
 (use-package projectile
   :ensure t
   :config
   (projectile-mode)
   (setq projectile-enable-caching t))
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC

** Snippets

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))

  (add-hook 'prog-mode-hook 'yas-minor-mode)
#+END_SRC
* Lang Specific Dev Config
** Elm

Allow for the searching of locally installed Elm binaries, perhaps in
the horrble `node_modules`.
#+BEGIN_SRC emacs-lisp
  (defun bin-from-node-modules (variable executable)
    (let ((root (locate-dominating-file
                 (or (buffer-file-name) default-directory)
                 (lambda (dir)
                   (let ((target (expand-file-name (concat "node_modules/.bin/" executable) dir)))
                     (and target (file-executable-p target)))))))
      (when root
        (let ((target (expand-file-name (concat "node_modules/.bin/" executable) root)))
          ;;(message "Setting value %s to vraible %s" target variable)
          (set variable target)))))
#+END_SRC

Add =elm-mode= and =flycheck= configuration for editing of elm
buffers.
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :ensure t
    :defer t
    :mode "\\.elm\\'"
    :init
    (add-to-list 'company-backends 'company-elm)
    (add-hook 'elm-mode #'elm-oracle-setup-completion)
    (add-hook 'elm-mode 'global-company-mode)
    :config
    (company-mode)
    (setq elm-format-on-save t)
    (add-hook 'after-init-hook #'global-flycheck-mode)
    (add-hook 'elm-mode-hook (lambda ()
                          (message "Setting local values for elm-mode")
                          (bin-from-node-modules 'elm-compile-command "elm-make")
                          (bin-from-node-modules 'elm-interactive-command "elm-repl")
                          (bin-from-node-modules 'elm-reactor-command "elm-reactor")
                          (bin-from-node-modules 'elm-package-command "elm-package")
                          (bin-from-node-modules 'elm-oracle-command "elm-oracle"))))

  (use-package flycheck-elm
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-elm-setup)))
#+END_SRC

** Go

Go mode
 #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :ensure t
  :defer t
  :mode "\\.go\\'")
 #+END_SRC

** Haskell

Some _very_ basic Haskell config
#+BEGIN_SRC emacs-lisp
  (defun fix-imports ()
    "Fixes imports."
    (interactive)
    (sort-lines nil (region-beginning) (region-end))
    (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)#-"))

  (use-package haskell-mode
    :ensure t
    :defer t
    :mode "\\.hs\\'")

(custom-set-variables
 '(haskell-stylish-on-save t))
#+END_SRC

** Markdown

A major mode for markdown
 #+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
 #+END_SRC

** Scala

Use =scala-mode= for scala syntax highlighting
#+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :ensure t
  :defer t
  :mode "\\.scala\\'")
#+END_SRC

Ensime
#+BEGIN_SRC emacs-lisp
(use-package ensime
  :ensure t)
#+END_SRC

** Yaml

 #+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :ensure t
  :defer t
  :mode "\\.yml\\'")
 #+END_SRC
* Org

** Appearance

Improve the appearance of bullet points in Emacs:

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

Set colours for priorities

#+BEGIN_SRC emacs-lisp
(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))
#+END_SRC

** Keybinds

Define org-mode related keybinds:

#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-c l") 'org-store-link)
  (define-key global-map (kbd "C-c a") 'org-agenda)
  (define-key global-map (kbd "C-c c") 'org-capture)
  (setq org-log-done t)

(defun xx-org-agenda (split)
  "Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda-list)
  (when (not split)
    (delete-other-windows)))

(define-key global-map (kbd "C-c t a") 'xx-org-agenda)

(setq org-agenda-custom-commands
      '(("c" "Simple agenda view"
         ((tags "PRIORITY=\"A\""
                ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                 (org-agenda-overriding-header "High-priority unfinished tasks:")))
          (agenda "")
          (alltodo "")))))
#+END_SRC

** File locations

Define the locations of the different org files:

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (list "~/org/todo.org"))
#+END_SRC

Nicer indenting in =org-mode= files

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

** Alert
Add =org-alert= to display some alerts on the desktop

#+BEGIN_SRC emacs-lisp
 (use-package org-alert
   :ensure t
   :config
 (setq alert-default-style 'libnotify))
 ;; (use-package org-wild-notifier
   ;; :ensure t)

#+END_SRC

** Capture templates

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/org/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("p" "Project Todo" entry
           (file+headline "~/org/projects.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
          ("c" "Call someone" entry
           (file+headline "~/org/call.org" "To call")
           "* TODO %?\n  %i\n")
          ))
#+END_SRC
